name: üöÄ Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - '**'  # Only deploy when backend files change

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 3Ô∏è‚É£ Deploy backend code (SAFE - preserves media/static)
      - name: Deploy backend code
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "üîÑ Starting deployment..."
            
            # Create backup directory with timestamp
            BACKUP_DIR=~/backup-$(date +%Y%m%d-%H%M%S)
            mkdir -p $BACKUP_DIR
            
            # Backup current code (excluding large folders)
            if [ -d ~/backend/backend-fastprint ]; then
              cp -r ~/backend/backend-fastprint $BACKUP_DIR/ || true
              echo "‚úÖ Backup created at $BACKUP_DIR"
            fi
            
            # Create directory if it doesn't exist
            mkdir -p ~/backend/backend-fastprint
            cd ~/backend/backend-fastprint
            
            echo "üìÅ Current directory: $(pwd)"
            echo "üìã Files before sync: $(ls -la)"
          EOF

      # 4Ô∏è‚É£ Sync code (SAFE - excludes important folders)
      - name: Sync code to EC2
        run: |
          rsync -avz --delete \
            --exclude 'media/' \
            --exclude 'static/' \
            --exclude 'venv/' \
            --exclude '__pycache__/' \
            --exclude '*.pyc' \
            --exclude '.git/' \
            --exclude '.env' \
            --exclude 'logs/' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ secrets.EC2_HOST }}:~/backend/backend-fastprint/

      # 5Ô∏è‚É£ Install dependencies and restart (SAFE)
      - name: Install dependencies and restart
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd ~/backend/backend-fastprint
            
            echo "üìã Files after sync: $(ls -la)"
            
            # Activate virtual environment if it exists
            if [ -d fastprint_backend/venv ]; then
              echo "üêç Activating virtual environment..."
              source fastprint_backend/venv/bin/activate
            fi
            
            # Install requirements if file exists
            if [ -f requirements.txt ]; then
              echo "üì¶ Installing requirements..."
              pip3 install -r requirements.txt || echo "‚ö†Ô∏è  Requirements install failed, continuing..."
            fi
            
            # Django operations (only if manage.py exists)
            if [ -f manage.py ] || [ -f fastprint_backend/manage.py ]; then
              echo "üîÑ Running Django operations..."
              if [ -f fastprint_backend/manage.py ]; then
                cd fastprint_backend
              fi
              python3 manage.py collectstatic --noinput || echo "‚ö†Ô∏è  Collectstatic failed, continuing..."
              python3 manage.py migrate --noinput || echo "‚ö†Ô∏è  Migration failed, continuing..."
              cd ~/backend/backend-fastprint
            fi
            
            # Make start script executable
            if [ -f start_backend.sh ]; then
              chmod +x start_backend.sh
              echo "‚úÖ Made start_backend.sh executable"
            fi
            
            # Restart backend with PM2
            echo "üîÑ Restarting backend..."
            pm2 restart backend || {
              echo "‚ö†Ô∏è  PM2 restart failed, trying to start fresh..."
              pm2 delete backend || true
              if [ -f start_backend.sh ]; then
                pm2 start start_backend.sh --name backend
              else
                echo "‚ùå No start_backend.sh found!"
                exit 1
              fi
            }
            
            # Save PM2 configuration
            pm2 save
            
            # Show final status
            echo "üìä PM2 Status:"
            pm2 list
            
            echo "‚úÖ Backend deployment completed successfully!"
          EOF

      # 6Ô∏è‚É£ Health check
      - name: Health check
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo "üè• Performing health check..."
            sleep 5
            pm2 list
            if pm2 list | grep -q "online.*backend"; then
              echo "‚úÖ Backend is running successfully!"
            else
              echo "‚ùå Backend health check failed!"
              pm2 logs backend --lines 10
              exit 1
            fi
          EOF
